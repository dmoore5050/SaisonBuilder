#!/usr/bin/env ruby

require_relative 'bootstrap_ar'

database = ENV['FP_ENV'] || 'development'
connect_to database

command = ARGV.shift.downcase unless ARGV.empty?
if command == 'add' || command == 'delete' and !ARGV.empty?
  command += ' ' + ARGV.shift.downcase
end
name = ARGV.shift.downcase unless ARGV.empty?
args = []
until ARGV.empty?
  name += ' ' + ARGV.shift.downcase unless name.include? ':'
  args << ARGV.shift.downcase if name.include? ':'
  name = name.tr(':', '') if ARGV.empty?
end

recipe_params = { recipe: { name: name, boil_length: args[0].to_i, primary_fermentation_temp: args[1] } }
ingredient_params = { ingredient: { name: name, type_code: args[0], yeast_code_wl: args[1].to_i, yeast_code_wyeast: args[2].to_i} }
recipe_controller = RecipeController.new recipe_params
ingredient_controller = IngredientController.new ingredient_params
question_set = QuestionView.new

case command
when nil then MenuView.render_menu
when 'style' then StyleView.render_definition
when 'techniques' then TechniquesView.render_list
when 'add ingredient'
  case name
  when nil then AddInstructionsView.add_ingredient_instructions_view
  else ingredient_controller.create
  end
when 'ingredients' then ingredient_controller.list_ingredients
when 'delete ingredient' then ingredient_controller.delete
when 'modify' then question_set.modify
when 'build'
  case name
  when nil then BuildInstructionsView.build_recipe_instructions_view
  else
    recipe_controller.create
    question_set.describe 'recipe', name
  end
when 'describe' then question_set.prep_describe
when 'view' then recipe_controller.view
when 'list' then recipe_controller.list_recipes
when 'delete recipe' then recipe_controller.delete
else puts "\nThat is not a valid command. Type sb to view a list of commands."
end